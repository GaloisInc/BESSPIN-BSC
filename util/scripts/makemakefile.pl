#!/usr/bin/perl

# Makefile maker
# Generate a Makefile for building and simulating with bsc
# See &usage, near the bottom

# Copyright (c) 2005 Bluespec, Inc.
#  All rights reserverd

$numargs = @ARGV;
%sims = qw (
   bluesim  1
   iverilog 1
   veriwell 1
   vcsi     1
   vcs      1
   ncverilog 1
   mcsim    1
   cver     1
   modelsim 1
);

if ($numargs == 2) {
  # default simulator
  $sim = "bluesim";
}

elsif ($numargs == 3) {
  $sim = $ARGV[2];
  if (!exists ($sims{$sim})) {
    print ("Unfamiliar simulator \"$sim\".\n");
    &usage ;
    exit 1 ;
  }
}
else {
  print "makemakefile requires two or three arguments\n";
  &usage ;
  exit 1 ;
}


$topfile = $ARGV[0];
$topmod = $ARGV[1];

if (!-e $topfile) {
  print ("Warning, file $topfile doesn't exist\n");
}

if (-e "Makefile") {
  print ("Makefile exists, ok to overwrite? (y/N) ");
  $_ = <STDIN>;
  chop ($_);
  die if ($_ ne "y");
}

open (MAKE, ">Makefile") || die ("Can't open Makefile for writing\n");

print ("Creating Makefile with top-level package \"$topfile\" and top-level module \"$topmod\"\n");

$template = <<'END';
#!/usr/bin/make -f
#
# This file was automatically generated by makemakefile on _DATE_
#

BSC=bsc
BSCFLAGS=-keep-fires -cross-info
SUFFIXES=

TOPMOD = _TOPMOD_
TOPFILE = _TOPFILE_
TOPPACK = $(basename $(TOPFILE))
SIMULATOR = _SIMULATOR_

FILENAME = .lastmakesim

SRCS = *.bsv
LASTSIM := $(shell cat $(FILENAME) 2>/dev/null)

ifdef SIM
SIMULATOR := $(SIM)
endif

# This means that there is a new sim type, force an update
ifneq ($(LASTSIM), $(SIM))
.PHONY:	$(TOPPACK).bo
endif

# An override on the Make commandline, remember this
ifdef SIM
FILECMD = @echo $(SIM) > $(FILENAME)
else
FILECMD = $(shell rm $(FILENAME)  2>/dev/null)
endif

# Bluesim and Verilog simulators use two very different bsc calls
ifeq ($(SIMULATOR),bluesim)
CMD1 =	$(BSC) $(BSCFLAGS) -sim -g $(TOPMOD) -u $(TOPFILE)
CMD2 =	$(BSC) $(BSCFLAGS) -sim -o $@  -e $(TOPMOD)  $(TOPMOD).ba
else
CMD1 =	$(BSC) $(BSCFLAGS) -u -verilog -g $(TOPMOD) $(TOPFILE)
CMD2 =	$(BSC) $(BSCFLAGS) -verilog -vsim $(SIMULATOR) -e $(TOPMOD) -o $@ $(TOPMOD).v
endif

.PHONY: help
help:
	@echo "Possible targets:"
	@echo "  build         --  compile $(TOPFILE) for the default simulator ($(SIMULATOR))"
	@echo "  link          --  Link compiled files for default simulator ($(SIMULATOR))"
	@echo "  run           --  build, link, and simulate using default ($(SIMULATOR)) simulator"
	@echo "  clean         --  remove binary, executable and temporary files"
	@echo "  help          --  display this message"
	@echo " override the default simulator: make build SIM=iverilog"

# ----------------------------------------------------------------
# Executing with Bluesim simulation

.PHONY: build
build:	$(TOPPACK).bo

# compile and link the whole system
$(TOPPACK).bo: $(SRCS) Makefile 
	$(FILECMD)
	$(CMD1)

.PHONY: link
link:	$(TOPMOD)

$(TOPMOD): $(TOPPACK).bo
	$(CMD2)

# run (simulate) the system
run:	$(TOPMOD)
ifeq ($(SIMULATOR), bluesim)
	./$(TOPMOD) -m 1500
else
	./$(TOPMOD) +bscvcd +bsccycle 
endif

.PHONY: clean
clean:
	rm -f  *.bi *.bo *.ba *.info *.sched *.c *.h *.o *.so  mk*.v  *~ $(TOPMOD) v95/* >/dev/null
END
$date = localtime;
$template =~ s/_TOPMOD_/$topmod/g;
$template =~ s/_TOPFILE_/$topfile/g;
$template =~ s/_DATE_/$date/g;
$template =~ s/_SIMULATOR_/$sim/g;

print MAKE $template;
close MAKE;

sub usage {
  print "Usage:
$0 <topfile> <topmodule> [<simulator>]

where:
<topfile> is the name of the top-level model file
<topmodule> is the name of the top-level module
<simulator> (optional) is the default simulator
 possible simulators:
   bluesim (default, if not specified)
   veriwell
   iverilog
   vcsi
   vcs
   ncverilog
   mcsim
   cver
   modelsim

Example:

makemakefile Model.bsv mkTop bluesim

";
}
