/**

@page _graph_visualization_prd_ Product Requirement Document
        
@section _graph_visualization_prd_introduction_  Introduction

@subsection _graph_visualization_prd_introduction_document_identifier_ Document Identifier

This is a product requirement document which defines requirements for the @b
Graph @b Visualization subtask of @b Bluespec @b workstation.

@subsection _graph_visualization_prd_introduction_definitions_ Definitions of Terms and Acronyms

        - @b BSV - Bluespec System Verilog
        - @b BSC - Bluespec System Verilog compiler
        - @b BlueWish - Bluespec wrapper for Tcl/Tk
@subsection _graph_visualization_prd_introduciton_overview_ Requirements Overview

The tool will provide means to display/manipulate scheduling graphs generated by
BSC. It will be implemented as a part of the Bluespec Workstation project (see
@ref _graph_visualization_prd_workstation_docs_ "[1]", @ref
_graph_visualization_prd_workstation_docs_ "[2]").  It will provide means to
view different types of graphs, in order to help the users to visualize their
designs.\n
For further reading basic knowledge of Bluespec Workstation (see @ref
_graph_visualization_prd_workstation_docs_ "[2]") and Bluespec System Verilog
(see @ref _graph_visualization_prd_bsv_docs_ "[4]", @ref
_graph_visualization_prd_bsv_docs_ "[5]") is strongly recommended.

@subsection _graph_visualization_prd_introduction_scope_ Scope 

The section @ref _graph_visualization_prd_functional_ describes the main
functional requirements.  The section @ref
_graph_visualization_prd_performance_requirements_ specifies constraints on
runtime, memory and other resource usage.  The section @ref
_graph_visualization_prd_verification_requirements_ defines requirements on QA.
For documentation requirements see section @ref
_graph_visualization_prd_documentation_requirements_.  For resource requirements
and schedule see section @ref
_graph_visualization_prd_cost_and_schedule_requirements_.  Project effort
estimations are provided in @ref _graph_visualization_prd_effort_estimations_
section. Dependencies from other projects, assumptions and risks are described
in section @ref _graph_visualization_prd_dependencies_assumptions_risks_. 

@subsection _graph_visualization_prd_introduction_references_ References

@anchor _graph_visualization_prd_workstation_docs_
[1].  workstation/docs/prd.odt - Product requirement document for Bluespec
Workstation\n
[2].  workstation/docs/fspec.odt - Functional specification document for
Bluespec Workstation\n
@anchor _graph_visualization_prd_graphviz_packages_
[3].  http://www.graphviz.org - graphviz packages\n
[4].  http://www.graphviz.org/cgi-bin/man?tcldot - Tcldot package man page \n
@anchor _graph_visualization_prd_bsv_docs_
[5].  reference_guide_rev_30_march_2007.pdf - Bluespec System Verilog reference
guide\n
[6].  bsv_user_guide_rev_30_march_2007.pdf - Bluespec System Verilog user
guide\n
@anchor _graph_visualization_prd_workstation_schedule_
[7].  workstation/docs/workstation_schedule.planner - Schedule for Bluespec
Workstation project\n
@anchor _graph_visualization_prd_graph_vis_use_cases_
[8]. @ref _graph_visualization_use_cases_  - Use cases document
for the Graph Visualization subtask of Bluespec Workstation  \n

@section _graph_visualization_prd_functional_ Functional Requirements

Graphs will be viewed in separate windows. All types of graphs represent the
relationship between rules and methods. The nodes of graphs represent the rules
and methods and the edges represent the relationship between those.

@subsection _graph_visualization_prd_graph_types_ Graph types

The following types of graphs will be available for each loaded module:
        - @b Conflict @b graph - represents the conflicts between rules/methods
        - @b Execution @b graph - represents only the execution order edges
        between rules/methods
        - @b Urgency @b graph - represents urgency dependencies between
        rules/methods
        - @b Combined @b graph - in this graph there are two nodes for each
        rule/method. First node represents the scheduling of the rule/method and
        the next one represents the execution of the rule/method's body.
        - @b Full @b Combined @b graph -  the same as the Combined graph, except
        that it includes the arbitrary edges which the BSC compiler has
        inserted.
Each graph will be shown in a separate window and each time the user wants to
view a specific information (e.g. only the rules of a particular type) it will
also be shown in a separate window. 

@subsection _graph_visualization_prd_manipulating_graphs_ Manipulating with graphs

User will be able to manipulate graphs in the following ways:
        - Show only rules/methods (nodes) connected to a given rule/method (via
          a distance < n) .
        - Keep or remove all Rules of a particular type. 
        - Keep or remove all edges of a given kind. 
        - Highlight (color/font) rules or edges of a particular type. 
        - Search for any cycles containing a specified rule/method.

@subsection _graph_visualization_prd_other_requirements_ Other requirements

In addition to the above graphs, other graphs may be required in the future.
These may not necessarily follow the patterns as specified above. For example,
portions of the design may be specified as a graph, with node representing
operators and edges representing connections. No high-level requirements
are needed from this options, but the development specification must allow
for general graph manipulation.

@section _graph_visualization_prd_implementation_ Implementation Requirements

Graphs will be represented using the graphviz (see @ref _graphviz_packages_
"[3]") ".dot" format. ".dot" files will be generated using the BSC flag
"-sched-dot", which generates several .dot files for each module.  Displaying
and manipulating with generated ".dot" files should be done using the TclDot
package (see @ref _graph_visualization_prd_graphviz_packages_ "[4]").

@section _graph_visualization_prd_performance_requirements_ Performance Requirements

@b TBD

@section _graph_visualization_prd_verification_requirements_ Verification Requirements

The GUI testing will be done manually.\n
GUI commands (ideally all) will have appropriate Tcl commands, which will
provide the same functionality from the command line (see @ref
 _graph_visualization_prd_workstation_docs_ "[2]"). These tests will be included into the Bluespec test suite.\n
Each use case described in @ref _graph_visualization_prd_graph_vis_use_cases_ "[8]" will be covered by a
test.

@section _graph_visualization_prd_documentation_requirements_ Documentation Requirements

During development process following documents will be created:
        - @b Functional @b specification - Describes the functionality of
        product without going into implementation details. Also describes
        external interface of product.
        - @b Development @b specification - Describes implementation details of
        product.
        - @b Use @b Cases - Definition of product usage scenarios in order to
        describe main and intermediate usage.
        - @b Test @b plan - Description of test suite and tests scenarios
        (acceptance tests, corner cases, etc.).
 
@section _graph_visualization_prd_cost_and_schedule_requirements_ Cost and Schedule Requirements

@b TBD

@section _graph_visualization_prd_dependencies_assumptions_risks_ Dependencies, Assumptions, Risks

As the graph visualization is a sub-task for Bluespec Workstation, it inherits
dependencies from Workstation (see @ref
_graph_visualization_prd_workstation_docs_ "[1]", @ref
_graph_visualization_prd_workstation_docs_ "[2]").\n
The only dependency specific for this task is the compatibility of TclDot
package with BlueWish interpreter.\n
The functional and development specifications should be reviewed in time to
avoid major rework. 

@section _graph_visualization_prd_effort_estimations_  Effort Estimations
Development will be done in phases, for each phase the following milestones are
defined:
        - PRD, Use cases, experiments/research - 10 days/pair
        - Functional specification, shell version - 10 days/pair
        - Development specification, Prototype implementation (initial version
          of the product) - 8 days/pair
        - Implementation - 7 days/pair
        - Stabilization - 6 days/pair
        - Documentation (user-guide/help) - 2 days/pair
        - Test plan - 3 days/pair
        - Test implementation/Manual QA - 5 days/pair

Please see @ref _graph_visualization_prd_workstation_schedule_ "[7]" for
details.

*/

// vim:syntax=doxygen:et:shiftwidth=8:tabstop=8:textwidth=80:
