// ddr2_v12_1_0002.v

// This file was auto-generated from alt_mem_if_ddr2_emif_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 12.1 177 at 2013.04.19.15:10:58

`timescale 1 ps / 1 ps
module ddr2_v12_1_0002 (
		input  wire         pll_ref_clk,       //  pll_ref_clk.clk
		input  wire         global_reset_n,    // global_reset.reset_n
		input  wire         soft_reset_n,      //   soft_reset.reset_n
		output wire         afi_clk,           //      afi_clk.clk
		output wire         afi_half_clk,      // afi_half_clk.clk
		output wire         afi_reset_n,       //    afi_reset.reset_n
		output wire [15:0]  mem_a,             //       memory.mem_a
		output wire [2:0]   mem_ba,            //             .mem_ba
		output wire [1:0]   mem_ck,            //             .mem_ck
		output wire [1:0]   mem_ck_n,          //             .mem_ck_n
		output wire [1:0]   mem_cke,           //             .mem_cke
		output wire [1:0]   mem_cs_n,          //             .mem_cs_n
		output wire [7:0]   mem_dm,            //             .mem_dm
		output wire [0:0]   mem_ras_n,         //             .mem_ras_n
		output wire [0:0]   mem_cas_n,         //             .mem_cas_n
		output wire [0:0]   mem_we_n,          //             .mem_we_n
		inout  wire [63:0]  mem_dq,            //             .mem_dq
		inout  wire [7:0]   mem_dqs,           //             .mem_dqs
		inout  wire [7:0]   mem_dqs_n,         //             .mem_dqs_n
		output wire [1:0]   mem_odt,           //             .mem_odt
		output wire         avl_ready,         //          avl.waitrequest_n
		input  wire         avl_burstbegin,    //             .beginbursttransfer
		input  wire [29:0]  avl_addr,          //             .address
		output wire         avl_rdata_valid,   //             .readdatavalid
		output wire [255:0] avl_rdata,         //             .readdata
		input  wire [255:0] avl_wdata,         //             .writedata
		input  wire [31:0]  avl_be,            //             .byteenable
		input  wire         avl_read_req,      //             .read
		input  wire         avl_write_req,     //             .write
		input  wire [2:0]   avl_size,          //             .burstcount
		output wire         local_init_done,   //       status.local_init_done
		output wire         local_cal_success, //             .local_cal_success
		output wire         local_cal_fail,    //             .local_cal_fail
		input  wire         oct_rdn,           //          oct.rdn
		input  wire         oct_rup,           //             .rup
		input  wire [15:0]  csr_addr,          //          csr.address
		input  wire         csr_read_req,      //             .read
		output wire [31:0]  csr_rdata,         //             .readdata
		input  wire         csr_write_req,     //             .write
		input  wire [31:0]  csr_wdata,         //             .writedata
		output wire         csr_waitrequest,   //             .waitrequest
		input  wire [3:0]   csr_be,            //             .byteenable
		output wire         csr_rdata_valid    //             .readdatavalid
	);

	wire          p0_addr_cmd_clk_clk;                                                         // p0:addr_cmd_clk -> m0:clk
	wire   [31:0] m0_phy_mux_afi_addr;                                                         // m0:phy_mux_addr -> p0:afi_addr
	wire    [3:0] m0_phy_mux_afi_odt;                                                          // m0:phy_mux_odt -> p0:afi_odt
	wire    [5:0] p0_afi_afi_wlat;                                                             // p0:afi_wlat -> m0:phy_mux_wlat
	wire    [1:0] p0_afi_afi_rdata_valid;                                                      // p0:afi_rdata_valid -> m0:phy_mux_rdata_valid
	wire    [1:0] m0_phy_mux_afi_rdata_en_full;                                                // m0:phy_mux_rdata_en_full -> p0:afi_rdata_en_full
	wire    [1:0] m0_phy_mux_afi_we_n;                                                         // m0:phy_mux_we_n -> p0:afi_we_n
	wire    [5:0] m0_phy_mux_afi_ba;                                                           // m0:phy_mux_ba -> p0:afi_ba
	wire    [3:0] m0_phy_mux_afi_cke;                                                          // m0:phy_mux_cke -> p0:afi_cke
	wire    [3:0] m0_phy_mux_afi_cs_n;                                                         // m0:phy_mux_cs_n -> p0:afi_cs_n
	wire  [255:0] m0_phy_mux_afi_wdata;                                                        // m0:phy_mux_wdata -> p0:afi_wdata
	wire    [1:0] m0_phy_mux_afi_rdata_en;                                                     // m0:phy_mux_rdata_en -> p0:afi_rdata_en
	wire    [1:0] m0_phy_mux_afi_cas_n;                                                        // m0:phy_mux_cas_n -> p0:afi_cas_n
	wire          p0_afi_afi_cal_success;                                                      // p0:afi_cal_success -> m0:phy_mux_cal_success
	wire    [1:0] m0_phy_mux_afi_ras_n;                                                        // m0:phy_mux_ras_n -> p0:afi_ras_n
	wire    [5:0] p0_afi_afi_rlat;                                                             // p0:afi_rlat -> m0:phy_mux_rlat
	wire  [255:0] p0_afi_afi_rdata;                                                            // p0:afi_rdata -> m0:phy_mux_rdata
	wire          p0_afi_afi_cal_fail;                                                         // p0:afi_cal_fail -> m0:phy_mux_cal_fail
	wire   [15:0] m0_phy_mux_afi_wdata_valid;                                                  // m0:phy_mux_wdata_valid -> p0:afi_wdata_valid
	wire   [15:0] m0_phy_mux_afi_dqs_burst;                                                    // m0:phy_mux_dqs_burst -> p0:afi_dqs_burst
	wire   [31:0] m0_phy_mux_afi_dm;                                                           // m0:phy_mux_dm -> p0:afi_dm
	wire    [5:0] m0_afi_afi_wlat;                                                             // m0:afi_wlat -> c0:afi_wlat
	wire    [1:0] m0_afi_afi_rdata_valid;                                                      // m0:afi_rdata_valid -> c0:afi_rdata_valid
	wire          m0_afi_afi_cal_success;                                                      // m0:afi_cal_success -> c0:afi_cal_success
	wire    [5:0] m0_afi_afi_rlat;                                                             // m0:afi_rlat -> c0:afi_rlat
	wire  [255:0] m0_afi_afi_rdata;                                                            // m0:afi_rdata -> c0:afi_rdata
	wire          m0_afi_afi_cal_fail;                                                         // m0:afi_cal_fail -> c0:afi_cal_fail
	wire          p0_avl_clk_clk;                                                              // p0:avl_clk -> s0:avl_clk
	wire          p0_avl_reset_reset;                                                          // p0:avl_reset_n -> s0:avl_reset_n
	wire          p0_scc_clk_clk;                                                              // p0:scc_clk -> s0:scc_clk
	wire          p0_scc_reset_reset;                                                          // p0:scc_reset_n -> s0:reset_n_scc_clk
	wire   [31:0] s0_afi_afi_addr;                                                             // s0:afi_addr -> m0:seq_mux_addr
	wire    [3:0] s0_afi_afi_odt;                                                              // s0:afi_odt -> m0:seq_mux_odt
	wire    [1:0] m0_seq_mux_afi_rdata_valid;                                                  // m0:seq_mux_rdata_valid -> s0:afi_rdata_valid
	wire    [1:0] s0_afi_afi_rdata_en_full;                                                    // s0:afi_rdata_en_full -> m0:seq_mux_rdata_en_full
	wire    [1:0] s0_afi_afi_we_n;                                                             // s0:afi_we_n -> m0:seq_mux_we_n
	wire    [5:0] s0_afi_afi_ba;                                                               // s0:afi_ba -> m0:seq_mux_ba
	wire    [3:0] s0_afi_afi_cke;                                                              // s0:afi_cke -> m0:seq_mux_cke
	wire    [3:0] s0_afi_afi_cs_n;                                                             // s0:afi_cs_n -> m0:seq_mux_cs_n
	wire  [255:0] s0_afi_afi_wdata;                                                            // s0:afi_wdata -> m0:seq_mux_wdata
	wire    [1:0] s0_afi_afi_rdata_en;                                                         // s0:afi_rdata_en -> m0:seq_mux_rdata_en
	wire    [1:0] s0_afi_afi_cas_n;                                                            // s0:afi_cas_n -> m0:seq_mux_cas_n
	wire    [1:0] s0_afi_afi_ras_n;                                                            // s0:afi_ras_n -> m0:seq_mux_ras_n
	wire  [255:0] m0_seq_mux_afi_rdata;                                                        // m0:seq_mux_rdata -> s0:afi_rdata
	wire   [15:0] s0_afi_afi_wdata_valid;                                                      // s0:afi_wdata_valid -> m0:seq_mux_wdata_valid
	wire   [15:0] s0_afi_afi_dqs_burst;                                                        // s0:afi_dqs_burst -> m0:seq_mux_dqs_burst
	wire   [31:0] s0_afi_afi_dm;                                                               // s0:afi_dm -> m0:seq_mux_dm
	wire          s0_mux_sel_mux_sel;                                                          // s0:phy_mux_sel -> m0:mux_sel
	wire          s0_phy_phy_cal_success;                                                      // s0:phy_cal_success -> p0:phy_cal_success
	wire          p0_phy_phy_reset_n;                                                          // p0:phy_reset_n -> s0:phy_reset_n
	wire          s0_phy_phy_cal_fail;                                                         // s0:phy_cal_fail -> p0:phy_cal_fail
	wire    [7:0] s0_phy_phy_read_increment_vfifo_qr;                                          // s0:phy_read_increment_vfifo_qr -> p0:phy_read_increment_vfifo_qr
	wire          p0_phy_phy_clk;                                                              // p0:phy_clk -> s0:phy_clk
	wire    [5:0] s0_phy_phy_afi_rlat;                                                         // s0:phy_afi_rlat -> p0:phy_afi_rlat
	wire    [7:0] s0_phy_phy_read_increment_vfifo_hr;                                          // s0:phy_read_increment_vfifo_hr -> p0:phy_read_increment_vfifo_hr
	wire    [7:0] s0_phy_phy_vfifo_rd_en_override;                                             // s0:phy_vfifo_rd_en_override -> p0:phy_vfifo_rd_en_override
	wire  [255:0] p0_phy_phy_read_fifo_q;                                                      // p0:phy_read_fifo_q -> s0:phy_read_fifo_q
	wire    [3:0] s0_phy_phy_read_latency_counter;                                             // s0:phy_read_latency_counter -> p0:phy_read_latency_counter
	wire    [7:0] s0_phy_phy_read_fifo_reset;                                                  // s0:phy_read_fifo_reset -> p0:phy_read_fifo_reset
	wire    [7:0] s0_phy_phy_read_increment_vfifo_fr;                                          // s0:phy_read_increment_vfifo_fr -> p0:phy_read_increment_vfifo_fr
	wire   [31:0] s0_phy_phy_cal_debug_info;                                                   // s0:phy_cal_debug_info -> p0:phy_cal_debug_info
	wire          s0_phy_phy_reset_mem_stable;                                                 // s0:phy_reset_mem_stable -> p0:phy_reset_mem_stable
	wire    [5:0] s0_phy_phy_afi_wlat;                                                         // s0:phy_afi_wlat -> p0:phy_afi_wlat
	wire    [7:0] p0_calib_calib_skip_steps;                                                   // p0:calib_skip_steps -> s0:calib_skip_steps
	wire    [7:0] s0_scc_scc_dm_ena;                                                           // s0:scc_dm_ena -> p0:scc_dm_ena
	wire   [63:0] s0_scc_scc_dq_ena;                                                           // s0:scc_dq_ena -> p0:scc_dq_ena
	wire    [7:0] s0_scc_scc_dqs_ena;                                                          // s0:scc_dqs_ena -> p0:scc_dqs_ena
	wire    [0:0] s0_scc_scc_upd;                                                              // s0:scc_upd -> p0:scc_upd
	wire    [7:0] p0_scc_capture_strobe_tracking;                                              // p0:capture_strobe_tracking -> s0:capture_strobe_tracking
	wire    [7:0] s0_scc_scc_dqs_io_ena;                                                       // s0:scc_dqs_io_ena -> p0:scc_dqs_io_ena
	wire          s0_scc_scc_data;                                                             // s0:scc_data -> p0:scc_data
	wire   [31:0] c0_afi_afi_addr;                                                             // c0:afi_addr -> m0:afi_addr
	wire    [3:0] c0_afi_afi_odt;                                                              // c0:afi_odt -> m0:afi_odt
	wire          c0_afi_afi_cal_req;                                                          // c0:afi_cal_req -> s0:afi_cal_req
	wire    [1:0] c0_afi_afi_rdata_en_full;                                                    // c0:afi_rdata_en_full -> m0:afi_rdata_en_full
	wire    [1:0] c0_afi_afi_we_n;                                                             // c0:afi_we_n -> m0:afi_we_n
	wire    [5:0] c0_afi_afi_ba;                                                               // c0:afi_ba -> m0:afi_ba
	wire    [3:0] c0_afi_afi_cke;                                                              // c0:afi_cke -> m0:afi_cke
	wire    [3:0] c0_afi_afi_cs_n;                                                             // c0:afi_cs_n -> m0:afi_cs_n
	wire  [255:0] c0_afi_afi_wdata;                                                            // c0:afi_wdata -> m0:afi_wdata
	wire    [1:0] c0_afi_afi_rdata_en;                                                         // c0:afi_rdata_en -> m0:afi_rdata_en
	wire    [1:0] c0_afi_afi_cas_n;                                                            // c0:afi_cas_n -> m0:afi_cas_n
	wire    [1:0] c0_afi_afi_ras_n;                                                            // c0:afi_ras_n -> m0:afi_ras_n
	wire    [1:0] c0_afi_afi_mem_clk_disable;                                                  // c0:afi_mem_clk_disable -> p0:afi_mem_clk_disable
	wire          c0_afi_afi_init_req;                                                         // c0:afi_init_req -> s0:afi_init_req
	wire   [15:0] c0_afi_afi_wdata_valid;                                                      // c0:afi_wdata_valid -> m0:afi_wdata_valid
	wire   [15:0] c0_afi_afi_dqs_burst;                                                        // c0:afi_dqs_burst -> m0:afi_dqs_burst
	wire   [31:0] c0_afi_afi_dm;                                                               // c0:afi_dm -> m0:afi_dm
	wire   [13:0] oct0_oct_sharing_parallelterminationcontrol;                                 // oct0:parallelterminationcontrol -> p0:parallelterminationcontrol
	wire   [13:0] oct0_oct_sharing_seriesterminationcontrol;                                   // oct0:seriesterminationcontrol -> p0:seriesterminationcontrol
	wire          pll0_pll_sharing_pll_avl_clk;                                                // pll0:pll_avl_clk -> p0:pll_avl_clk
	wire          pll0_pll_sharing_pll_config_clk;                                             // pll0:pll_config_clk -> p0:pll_config_clk
	wire          pll0_pll_sharing_pll_addr_cmd_clk;                                           // pll0:pll_addr_cmd_clk -> p0:pll_addr_cmd_clk
	wire          pll0_pll_sharing_pll_mem_clk;                                                // pll0:pll_mem_clk -> p0:pll_mem_clk
	wire          pll0_pll_sharing_pll_locked;                                                 // pll0:pll_locked -> p0:pll_locked
	wire          pll0_pll_sharing_pll_write_clk_pre_phy_clk;                                  // pll0:pll_write_clk_pre_phy_clk -> p0:pll_write_clk_pre_phy_clk
	wire          pll0_pll_sharing_pll_write_clk;                                              // pll0:pll_write_clk -> p0:pll_write_clk
	wire          p0_dll_clk_clk;                                                              // p0:dll_clk -> dll0:clk
	wire          p0_dll_sharing_dll_pll_locked;                                               // p0:dll_pll_locked -> dll0:dll_pll_locked
	wire    [5:0] dll0_dll_sharing_dll_delayctrl;                                              // dll0:dll_delayctrl -> p0:dll_delayctrl
	wire          csr_bridge_m0_waitrequest;                                                   // csr_bridge_m0_translator:av_waitrequest -> csr_bridge:m0_waitrequest
	wire   [31:0] csr_bridge_m0_writedata;                                                     // csr_bridge:m0_writedata -> csr_bridge_m0_translator:av_writedata
	wire   [15:0] csr_bridge_m0_address;                                                       // csr_bridge:m0_address -> csr_bridge_m0_translator:av_address
	wire          csr_bridge_m0_write;                                                         // csr_bridge:m0_write -> csr_bridge_m0_translator:av_write
	wire          csr_bridge_m0_read;                                                          // csr_bridge:m0_read -> csr_bridge_m0_translator:av_read
	wire   [31:0] csr_bridge_m0_readdata;                                                      // csr_bridge_m0_translator:av_readdata -> csr_bridge:m0_readdata
	wire          csr_bridge_m0_readdatavalid;                                                 // csr_bridge_m0_translator:av_readdatavalid -> csr_bridge:m0_readdatavalid
	wire    [3:0] csr_bridge_m0_byteenable;                                                    // csr_bridge:m0_byteenable -> csr_bridge_m0_translator:av_byteenable
	wire          p0_csr_translator_avalon_anti_slave_0_waitrequest;                           // p0:csr_waitrequest -> p0_csr_translator:av_waitrequest
	wire   [31:0] p0_csr_translator_avalon_anti_slave_0_writedata;                             // p0_csr_translator:av_writedata -> p0:csr_wdata
	wire    [7:0] p0_csr_translator_avalon_anti_slave_0_address;                               // p0_csr_translator:av_address -> p0:csr_addr
	wire          p0_csr_translator_avalon_anti_slave_0_write;                                 // p0_csr_translator:av_write -> p0:csr_write_req
	wire          p0_csr_translator_avalon_anti_slave_0_read;                                  // p0_csr_translator:av_read -> p0:csr_read_req
	wire   [31:0] p0_csr_translator_avalon_anti_slave_0_readdata;                              // p0:csr_rdata -> p0_csr_translator:av_readdata
	wire          p0_csr_translator_avalon_anti_slave_0_readdatavalid;                         // p0:csr_rdata_valid -> p0_csr_translator:av_readdatavalid
	wire    [3:0] p0_csr_translator_avalon_anti_slave_0_byteenable;                            // p0_csr_translator:av_byteenable -> p0:csr_be
	wire          c0_csr_translator_avalon_anti_slave_0_waitrequest;                           // c0:csr_waitrequest -> c0_csr_translator:av_waitrequest
	wire   [31:0] c0_csr_translator_avalon_anti_slave_0_writedata;                             // c0_csr_translator:av_writedata -> c0:csr_wdata
	wire    [7:0] c0_csr_translator_avalon_anti_slave_0_address;                               // c0_csr_translator:av_address -> c0:csr_addr
	wire          c0_csr_translator_avalon_anti_slave_0_write;                                 // c0_csr_translator:av_write -> c0:csr_write_req
	wire          c0_csr_translator_avalon_anti_slave_0_read;                                  // c0_csr_translator:av_read -> c0:csr_read_req
	wire   [31:0] c0_csr_translator_avalon_anti_slave_0_readdata;                              // c0:csr_rdata -> c0_csr_translator:av_readdata
	wire          c0_csr_translator_avalon_anti_slave_0_readdatavalid;                         // c0:csr_rdata_valid -> c0_csr_translator:av_readdatavalid
	wire    [3:0] c0_csr_translator_avalon_anti_slave_0_byteenable;                            // c0_csr_translator:av_byteenable -> c0:csr_be
	wire          csr_bridge_m0_translator_avalon_universal_master_0_waitrequest;              // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> csr_bridge_m0_translator:uav_waitrequest
	wire    [2:0] csr_bridge_m0_translator_avalon_universal_master_0_burstcount;               // csr_bridge_m0_translator:uav_burstcount -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] csr_bridge_m0_translator_avalon_universal_master_0_writedata;                // csr_bridge_m0_translator:uav_writedata -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [17:0] csr_bridge_m0_translator_avalon_universal_master_0_address;                  // csr_bridge_m0_translator:uav_address -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_address
	wire          csr_bridge_m0_translator_avalon_universal_master_0_lock;                     // csr_bridge_m0_translator:uav_lock -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_lock
	wire          csr_bridge_m0_translator_avalon_universal_master_0_write;                    // csr_bridge_m0_translator:uav_write -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_write
	wire          csr_bridge_m0_translator_avalon_universal_master_0_read;                     // csr_bridge_m0_translator:uav_read -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] csr_bridge_m0_translator_avalon_universal_master_0_readdata;                 // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_readdata -> csr_bridge_m0_translator:uav_readdata
	wire          csr_bridge_m0_translator_avalon_universal_master_0_debugaccess;              // csr_bridge_m0_translator:uav_debugaccess -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] csr_bridge_m0_translator_avalon_universal_master_0_byteenable;               // csr_bridge_m0_translator:uav_byteenable -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid;            // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> csr_bridge_m0_translator:uav_readdatavalid
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // p0_csr_translator:uav_waitrequest -> p0_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;              // p0_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> p0_csr_translator:uav_burstcount
	wire   [31:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;               // p0_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> p0_csr_translator:uav_writedata
	wire   [17:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_address;                 // p0_csr_translator_avalon_universal_slave_0_agent:m0_address -> p0_csr_translator:uav_address
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_write;                   // p0_csr_translator_avalon_universal_slave_0_agent:m0_write -> p0_csr_translator:uav_write
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                    // p0_csr_translator_avalon_universal_slave_0_agent:m0_lock -> p0_csr_translator:uav_lock
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_read;                    // p0_csr_translator_avalon_universal_slave_0_agent:m0_read -> p0_csr_translator:uav_read
	wire   [31:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                // p0_csr_translator:uav_readdata -> p0_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // p0_csr_translator:uav_readdatavalid -> p0_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // p0_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> p0_csr_translator:uav_debugaccess
	wire    [3:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;              // p0_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> p0_csr_translator:uav_byteenable
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;            // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire   [87:0] p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;             // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;            // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire   [87:0] p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [31:0] p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [31:0] p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // c0_csr_translator:uav_waitrequest -> c0_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;              // c0_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> c0_csr_translator:uav_burstcount
	wire   [31:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;               // c0_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> c0_csr_translator:uav_writedata
	wire   [17:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_address;                 // c0_csr_translator_avalon_universal_slave_0_agent:m0_address -> c0_csr_translator:uav_address
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_write;                   // c0_csr_translator_avalon_universal_slave_0_agent:m0_write -> c0_csr_translator:uav_write
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                    // c0_csr_translator_avalon_universal_slave_0_agent:m0_lock -> c0_csr_translator:uav_lock
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_read;                    // c0_csr_translator_avalon_universal_slave_0_agent:m0_read -> c0_csr_translator:uav_read
	wire   [31:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                // c0_csr_translator:uav_readdata -> c0_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // c0_csr_translator:uav_readdatavalid -> c0_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // c0_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> c0_csr_translator:uav_debugaccess
	wire    [3:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;              // c0_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> c0_csr_translator:uav_byteenable
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;            // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire   [87:0] c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;             // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;            // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire   [87:0] c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [31:0] c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [31:0] c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;     // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid;           // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;   // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire   [86:0] csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data;            // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready;           // addr_router:sink_ready -> csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // p0_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                   // p0_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // p0_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire   [86:0] p0_csr_translator_avalon_universal_slave_0_agent_rp_data;                    // p0_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          p0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // c0_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                   // c0_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // c0_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire   [86:0] c0_csr_translator_avalon_universal_slave_0_agent_rp_data;                    // c0_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          c0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire          addr_router_src_endofpacket;                                                 // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                       // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                               // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire   [86:0] addr_router_src_data;                                                        // addr_router:src_data -> limiter:cmd_sink_data
	wire    [1:0] addr_router_src_channel;                                                     // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                       // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_rsp_src_endofpacket;                                                 // limiter:rsp_src_endofpacket -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                       // limiter:rsp_src_valid -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                               // limiter:rsp_src_startofpacket -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire   [86:0] limiter_rsp_src_data;                                                        // limiter:rsp_src_data -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_data
	wire    [1:0] limiter_rsp_src_channel;                                                     // limiter:rsp_src_channel -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                       // csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          rst_controller_reset_out_reset;                                              // rst_controller:reset_out -> [addr_router:reset, cmd_xbar_demux:reset, crosser:in_reset, crosser_001:in_reset, crosser_002:out_reset, crosser_003:out_reset, csr_bridge:reset_n, csr_bridge_m0_translator:reset, csr_bridge_m0_translator_avalon_universal_master_0_agent:reset, limiter:reset, rsp_xbar_mux:reset]
	wire          limiter_cmd_src_endofpacket;                                                 // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                               // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire   [86:0] limiter_cmd_src_data;                                                        // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire    [1:0] limiter_cmd_src_channel;                                                     // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                       // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                      // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                              // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire   [86:0] rsp_xbar_mux_src_data;                                                       // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire    [1:0] rsp_xbar_mux_src_channel;                                                    // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                      // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          crosser_out_ready;                                                           // p0_csr_translator_avalon_universal_slave_0_agent:cp_ready -> crosser:out_ready
	wire          id_router_src_endofpacket;                                                   // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                         // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                 // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire   [86:0] id_router_src_data;                                                          // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [1:0] id_router_src_channel;                                                       // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                         // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          crosser_001_out_ready;                                                       // c0_csr_translator_avalon_universal_slave_0_agent:cp_ready -> crosser_001:out_ready
	wire          id_router_001_src_endofpacket;                                               // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                     // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                             // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire   [86:0] id_router_001_src_data;                                                      // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [1:0] id_router_001_src_channel;                                                   // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                     // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          crosser_out_endofpacket;                                                     // crosser:out_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          crosser_out_valid;                                                           // crosser:out_valid -> p0_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire          crosser_out_startofpacket;                                                   // crosser:out_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [86:0] crosser_out_data;                                                            // crosser:out_data -> p0_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire    [1:0] crosser_out_channel;                                                         // crosser:out_channel -> p0_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                             // cmd_xbar_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                   // cmd_xbar_demux:src0_valid -> crosser:in_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                           // cmd_xbar_demux:src0_startofpacket -> crosser:in_startofpacket
	wire   [86:0] cmd_xbar_demux_src0_data;                                                    // cmd_xbar_demux:src0_data -> crosser:in_data
	wire    [1:0] cmd_xbar_demux_src0_channel;                                                 // cmd_xbar_demux:src0_channel -> crosser:in_channel
	wire          cmd_xbar_demux_src0_ready;                                                   // crosser:in_ready -> cmd_xbar_demux:src0_ready
	wire          crosser_001_out_endofpacket;                                                 // crosser_001:out_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          crosser_001_out_valid;                                                       // crosser_001:out_valid -> c0_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire          crosser_001_out_startofpacket;                                               // crosser_001:out_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [86:0] crosser_001_out_data;                                                        // crosser_001:out_data -> c0_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire    [1:0] crosser_001_out_channel;                                                     // crosser_001:out_channel -> c0_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src1_endofpacket;                                             // cmd_xbar_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                   // cmd_xbar_demux:src1_valid -> crosser_001:in_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                           // cmd_xbar_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire   [86:0] cmd_xbar_demux_src1_data;                                                    // cmd_xbar_demux:src1_data -> crosser_001:in_data
	wire    [1:0] cmd_xbar_demux_src1_channel;                                                 // cmd_xbar_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_xbar_demux_src1_ready;                                                   // crosser_001:in_ready -> cmd_xbar_demux:src1_ready
	wire          crosser_002_out_endofpacket;                                                 // crosser_002:out_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          crosser_002_out_valid;                                                       // crosser_002:out_valid -> rsp_xbar_mux:sink0_valid
	wire          crosser_002_out_startofpacket;                                               // crosser_002:out_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire   [86:0] crosser_002_out_data;                                                        // crosser_002:out_data -> rsp_xbar_mux:sink0_data
	wire    [1:0] crosser_002_out_channel;                                                     // crosser_002:out_channel -> rsp_xbar_mux:sink0_channel
	wire          crosser_002_out_ready;                                                       // rsp_xbar_mux:sink0_ready -> crosser_002:out_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                             // rsp_xbar_demux:src0_endofpacket -> crosser_002:in_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                   // rsp_xbar_demux:src0_valid -> crosser_002:in_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                           // rsp_xbar_demux:src0_startofpacket -> crosser_002:in_startofpacket
	wire   [86:0] rsp_xbar_demux_src0_data;                                                    // rsp_xbar_demux:src0_data -> crosser_002:in_data
	wire    [1:0] rsp_xbar_demux_src0_channel;                                                 // rsp_xbar_demux:src0_channel -> crosser_002:in_channel
	wire          rsp_xbar_demux_src0_ready;                                                   // crosser_002:in_ready -> rsp_xbar_demux:src0_ready
	wire          crosser_003_out_endofpacket;                                                 // crosser_003:out_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          crosser_003_out_valid;                                                       // crosser_003:out_valid -> rsp_xbar_mux:sink1_valid
	wire          crosser_003_out_startofpacket;                                               // crosser_003:out_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire   [86:0] crosser_003_out_data;                                                        // crosser_003:out_data -> rsp_xbar_mux:sink1_data
	wire    [1:0] crosser_003_out_channel;                                                     // crosser_003:out_channel -> rsp_xbar_mux:sink1_channel
	wire          crosser_003_out_ready;                                                       // rsp_xbar_mux:sink1_ready -> crosser_003:out_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                         // rsp_xbar_demux_001:src0_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                               // rsp_xbar_demux_001:src0_valid -> crosser_003:in_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                       // rsp_xbar_demux_001:src0_startofpacket -> crosser_003:in_startofpacket
	wire   [86:0] rsp_xbar_demux_001_src0_data;                                                // rsp_xbar_demux_001:src0_data -> crosser_003:in_data
	wire    [1:0] rsp_xbar_demux_001_src0_channel;                                             // rsp_xbar_demux_001:src0_channel -> crosser_003:in_channel
	wire          rsp_xbar_demux_001_src0_ready;                                               // crosser_003:in_ready -> rsp_xbar_demux_001:src0_ready
	wire    [1:0] limiter_cmd_valid_data;                                                      // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid

	ddr2_v12_1_pll0 pll0 (
		.global_reset_n            (global_reset_n),                             // global_reset.reset_n
		.afi_clk                   (afi_clk),                                    //      afi_clk.clk
		.afi_half_clk              (afi_half_clk),                               // afi_half_clk.clk
		.pll_ref_clk               (pll_ref_clk),                                //  pll_ref_clk.clk
		.pll_mem_clk               (pll0_pll_sharing_pll_mem_clk),               //  pll_sharing.pll_mem_clk
		.pll_write_clk             (pll0_pll_sharing_pll_write_clk),             //             .pll_write_clk
		.pll_write_clk_pre_phy_clk (pll0_pll_sharing_pll_write_clk_pre_phy_clk), //             .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk          (pll0_pll_sharing_pll_addr_cmd_clk),          //             .pll_addr_cmd_clk
		.pll_locked                (pll0_pll_sharing_pll_locked),                //             .pll_locked
		.pll_avl_clk               (pll0_pll_sharing_pll_avl_clk),               //             .pll_avl_clk
		.pll_config_clk            (pll0_pll_sharing_pll_config_clk)             //             .pll_config_clk
	);

	ddr2_v12_1_p0 p0 (
		.global_reset_n              (global_reset_n),                                      //        global_reset.reset_n
		.soft_reset_n                (soft_reset_n),                                        //          soft_reset.reset_n
		.afi_reset_n                 (afi_reset_n),                                         //           afi_reset.reset_n
		.afi_clk                     (afi_clk),                                             //             afi_clk.clk
		.afi_half_clk                (afi_half_clk),                                        //        afi_half_clk.clk
		.addr_cmd_clk                (p0_addr_cmd_clk_clk),                                 //        addr_cmd_clk.clk
		.avl_clk                     (p0_avl_clk_clk),                                      //             avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                                  //           avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                                      //             scc_clk.clk
		.scc_reset_n                 (p0_scc_reset_reset),                                  //           scc_reset.reset_n
		.dll_clk                     (p0_dll_clk_clk),                                      //             dll_clk.clk
		.afi_addr                    (m0_phy_mux_afi_addr),                                 //                 afi.afi_addr
		.afi_ba                      (m0_phy_mux_afi_ba),                                   //                    .afi_ba
		.afi_ras_n                   (m0_phy_mux_afi_ras_n),                                //                    .afi_ras_n
		.afi_we_n                    (m0_phy_mux_afi_we_n),                                 //                    .afi_we_n
		.afi_cas_n                   (m0_phy_mux_afi_cas_n),                                //                    .afi_cas_n
		.afi_odt                     (m0_phy_mux_afi_odt),                                  //                    .afi_odt
		.afi_cke                     (m0_phy_mux_afi_cke),                                  //                    .afi_cke
		.afi_cs_n                    (m0_phy_mux_afi_cs_n),                                 //                    .afi_cs_n
		.afi_dqs_burst               (m0_phy_mux_afi_dqs_burst),                            //                    .afi_dqs_burst
		.afi_wdata_valid             (m0_phy_mux_afi_wdata_valid),                          //                    .afi_wdata_valid
		.afi_wdata                   (m0_phy_mux_afi_wdata),                                //                    .afi_wdata
		.afi_dm                      (m0_phy_mux_afi_dm),                                   //                    .afi_dm
		.afi_rdata                   (p0_afi_afi_rdata),                                    //                    .afi_rdata
		.afi_rdata_en                (m0_phy_mux_afi_rdata_en),                             //                    .afi_rdata_en
		.afi_rdata_en_full           (m0_phy_mux_afi_rdata_en_full),                        //                    .afi_rdata_en_full
		.afi_rdata_valid             (p0_afi_afi_rdata_valid),                              //                    .afi_rdata_valid
		.afi_cal_success             (p0_afi_afi_cal_success),                              //                    .afi_cal_success
		.afi_cal_fail                (p0_afi_afi_cal_fail),                                 //                    .afi_cal_fail
		.afi_wlat                    (p0_afi_afi_wlat),                                     //                    .afi_wlat
		.afi_rlat                    (p0_afi_afi_rlat),                                     //                    .afi_rlat
		.phy_clk                     (p0_phy_phy_clk),                                      //                 phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                                  //                    .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),                     //                    .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                                 //                    .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                                 //                    .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr),                  //                    .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr),                  //                    .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr),                  //                    .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),                         //                    .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),                              //                    .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                                 //                    .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),                           //                    .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),                          //                    .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),                     //                    .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),                              //                    .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),                           //               calib.calib_skip_steps
		.scc_data                    (s0_scc_scc_data),                                     //                 scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                                  //                    .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),                               //                    .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                                   //                    .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                                   //                    .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),                      //                    .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                                      //                    .scc_upd
		.afi_mem_clk_disable         (c0_afi_afi_mem_clk_disable),                          // afi_mem_clk_disable.afi_mem_clk_disable
		.pll_mem_clk                 (pll0_pll_sharing_pll_mem_clk),                        //         pll_sharing.pll_mem_clk
		.pll_write_clk               (pll0_pll_sharing_pll_write_clk),                      //                    .pll_write_clk
		.pll_write_clk_pre_phy_clk   (pll0_pll_sharing_pll_write_clk_pre_phy_clk),          //                    .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk            (pll0_pll_sharing_pll_addr_cmd_clk),                   //                    .pll_addr_cmd_clk
		.pll_locked                  (pll0_pll_sharing_pll_locked),                         //                    .pll_locked
		.pll_avl_clk                 (pll0_pll_sharing_pll_avl_clk),                        //                    .pll_avl_clk
		.pll_config_clk              (pll0_pll_sharing_pll_config_clk),                     //                    .pll_config_clk
		.dll_pll_locked              (p0_dll_sharing_dll_pll_locked),                       //         dll_sharing.dll_pll_locked
		.dll_delayctrl               (dll0_dll_sharing_dll_delayctrl),                      //                    .dll_delayctrl
		.seriesterminationcontrol    (oct0_oct_sharing_seriesterminationcontrol),           //         oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol  (oct0_oct_sharing_parallelterminationcontrol),         //                    .parallelterminationcontrol
		.mem_a                       (mem_a),                                               //              memory.mem_a
		.mem_ba                      (mem_ba),                                              //                    .mem_ba
		.mem_ck                      (mem_ck),                                              //                    .mem_ck
		.mem_ck_n                    (mem_ck_n),                                            //                    .mem_ck_n
		.mem_cke                     (mem_cke),                                             //                    .mem_cke
		.mem_cs_n                    (mem_cs_n),                                            //                    .mem_cs_n
		.mem_dm                      (mem_dm),                                              //                    .mem_dm
		.mem_ras_n                   (mem_ras_n),                                           //                    .mem_ras_n
		.mem_cas_n                   (mem_cas_n),                                           //                    .mem_cas_n
		.mem_we_n                    (mem_we_n),                                            //                    .mem_we_n
		.mem_dq                      (mem_dq),                                              //                    .mem_dq
		.mem_dqs                     (mem_dqs),                                             //                    .mem_dqs
		.mem_dqs_n                   (mem_dqs_n),                                           //                    .mem_dqs_n
		.mem_odt                     (mem_odt),                                             //                    .mem_odt
		.csr_write_req               (p0_csr_translator_avalon_anti_slave_0_write),         //                 csr.write
		.csr_read_req                (p0_csr_translator_avalon_anti_slave_0_read),          //                    .read
		.csr_waitrequest             (p0_csr_translator_avalon_anti_slave_0_waitrequest),   //                    .waitrequest
		.csr_addr                    (p0_csr_translator_avalon_anti_slave_0_address),       //                    .address
		.csr_be                      (p0_csr_translator_avalon_anti_slave_0_byteenable),    //                    .byteenable
		.csr_wdata                   (p0_csr_translator_avalon_anti_slave_0_writedata),     //                    .writedata
		.csr_rdata                   (p0_csr_translator_avalon_anti_slave_0_readdata),      //                    .readdata
		.csr_rdata_valid             (p0_csr_translator_avalon_anti_slave_0_readdatavalid), //                    .readdatavalid
		.csr_soft_reset_req          (1'b0)                                                 //         (terminated)
	);

	afi_mux_ddrx #(
		.AFI_RATE_RATIO      (2),
		.AFI_ADDR_WIDTH      (32),
		.AFI_BANKADDR_WIDTH  (6),
		.AFI_CONTROL_WIDTH   (2),
		.AFI_CS_WIDTH        (4),
		.AFI_CLK_EN_WIDTH    (4),
		.AFI_DM_WIDTH        (32),
		.AFI_DQ_WIDTH        (256),
		.AFI_ODT_WIDTH       (4),
		.AFI_WRITE_DQS_WIDTH (16),
		.AFI_RLAT_WIDTH      (6),
		.AFI_WLAT_WIDTH      (6)
	) m0 (
		.clk                   (p0_addr_cmd_clk_clk),          //     clk.clk
		.afi_addr              (c0_afi_afi_addr),              //     afi.afi_addr
		.afi_ba                (c0_afi_afi_ba),                //        .afi_ba
		.afi_ras_n             (c0_afi_afi_ras_n),             //        .afi_ras_n
		.afi_we_n              (c0_afi_afi_we_n),              //        .afi_we_n
		.afi_cas_n             (c0_afi_afi_cas_n),             //        .afi_cas_n
		.afi_odt               (c0_afi_afi_odt),               //        .afi_odt
		.afi_cke               (c0_afi_afi_cke),               //        .afi_cke
		.afi_cs_n              (c0_afi_afi_cs_n),              //        .afi_cs_n
		.afi_dqs_burst         (c0_afi_afi_dqs_burst),         //        .afi_dqs_burst
		.afi_wdata_valid       (c0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.afi_wdata             (c0_afi_afi_wdata),             //        .afi_wdata
		.afi_dm                (c0_afi_afi_dm),                //        .afi_dm
		.afi_rdata             (m0_afi_afi_rdata),             //        .afi_rdata
		.afi_rdata_en          (c0_afi_afi_rdata_en),          //        .afi_rdata_en
		.afi_rdata_en_full     (c0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.afi_rdata_valid       (m0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.afi_cal_success       (m0_afi_afi_cal_success),       //        .afi_cal_success
		.afi_cal_fail          (m0_afi_afi_cal_fail),          //        .afi_cal_fail
		.afi_wlat              (m0_afi_afi_wlat),              //        .afi_wlat
		.afi_rlat              (m0_afi_afi_rlat),              //        .afi_rlat
		.seq_mux_addr          (s0_afi_afi_addr),              // seq_mux.afi_addr
		.seq_mux_ba            (s0_afi_afi_ba),                //        .afi_ba
		.seq_mux_ras_n         (s0_afi_afi_ras_n),             //        .afi_ras_n
		.seq_mux_we_n          (s0_afi_afi_we_n),              //        .afi_we_n
		.seq_mux_cas_n         (s0_afi_afi_cas_n),             //        .afi_cas_n
		.seq_mux_odt           (s0_afi_afi_odt),               //        .afi_odt
		.seq_mux_cke           (s0_afi_afi_cke),               //        .afi_cke
		.seq_mux_cs_n          (s0_afi_afi_cs_n),              //        .afi_cs_n
		.seq_mux_dqs_burst     (s0_afi_afi_dqs_burst),         //        .afi_dqs_burst
		.seq_mux_wdata_valid   (s0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.seq_mux_wdata         (s0_afi_afi_wdata),             //        .afi_wdata
		.seq_mux_dm            (s0_afi_afi_dm),                //        .afi_dm
		.seq_mux_rdata         (m0_seq_mux_afi_rdata),         //        .afi_rdata
		.seq_mux_rdata_en      (s0_afi_afi_rdata_en),          //        .afi_rdata_en
		.seq_mux_rdata_en_full (s0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.seq_mux_rdata_valid   (m0_seq_mux_afi_rdata_valid),   //        .afi_rdata_valid
		.phy_mux_addr          (m0_phy_mux_afi_addr),          // phy_mux.afi_addr
		.phy_mux_ba            (m0_phy_mux_afi_ba),            //        .afi_ba
		.phy_mux_ras_n         (m0_phy_mux_afi_ras_n),         //        .afi_ras_n
		.phy_mux_we_n          (m0_phy_mux_afi_we_n),          //        .afi_we_n
		.phy_mux_cas_n         (m0_phy_mux_afi_cas_n),         //        .afi_cas_n
		.phy_mux_odt           (m0_phy_mux_afi_odt),           //        .afi_odt
		.phy_mux_cke           (m0_phy_mux_afi_cke),           //        .afi_cke
		.phy_mux_cs_n          (m0_phy_mux_afi_cs_n),          //        .afi_cs_n
		.phy_mux_dqs_burst     (m0_phy_mux_afi_dqs_burst),     //        .afi_dqs_burst
		.phy_mux_wdata_valid   (m0_phy_mux_afi_wdata_valid),   //        .afi_wdata_valid
		.phy_mux_wdata         (m0_phy_mux_afi_wdata),         //        .afi_wdata
		.phy_mux_dm            (m0_phy_mux_afi_dm),            //        .afi_dm
		.phy_mux_rdata         (p0_afi_afi_rdata),             //        .afi_rdata
		.phy_mux_rdata_en      (m0_phy_mux_afi_rdata_en),      //        .afi_rdata_en
		.phy_mux_rdata_en_full (m0_phy_mux_afi_rdata_en_full), //        .afi_rdata_en_full
		.phy_mux_rdata_valid   (p0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.phy_mux_cal_success   (p0_afi_afi_cal_success),       //        .afi_cal_success
		.phy_mux_cal_fail      (p0_afi_afi_cal_fail),          //        .afi_cal_fail
		.phy_mux_wlat          (p0_afi_afi_wlat),              //        .afi_wlat
		.phy_mux_rlat          (p0_afi_afi_rlat),              //        .afi_rlat
		.mux_sel               (s0_mux_sel_mux_sel)            // mux_sel.mux_sel
	);

	ddr2_v12_1_s0 s0 (
		.avl_clk                     (p0_avl_clk_clk),                     //          avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                 //        avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                     //          scc_clk.clk
		.reset_n_scc_clk             (p0_scc_reset_reset),                 //        scc_reset.reset_n
		.scc_data                    (s0_scc_scc_data),                    //              scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                 //                 .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),              //                 .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                  //                 .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                  //                 .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),     //                 .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                     //                 .scc_upd
		.afi_init_req                (c0_afi_afi_init_req),                // afi_init_cal_req.afi_init_req
		.afi_cal_req                 (c0_afi_afi_cal_req),                 //                 .afi_cal_req
		.phy_clk                     (p0_phy_phy_clk),                     //              phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                 //                 .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),    //                 .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                //                 .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                //                 .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr), //                 .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr), //                 .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr), //                 .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),        //                 .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),             //                 .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                //                 .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),          //                 .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),         //                 .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),    //                 .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),             //                 .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),          //            calib.calib_skip_steps
		.phy_mux_sel                 (s0_mux_sel_mux_sel),                 //          mux_sel.mux_sel
		.afi_clk                     (afi_clk),                            //          afi_clk.clk
		.afi_reset_n                 (afi_reset_n),                        //        afi_reset.reset_n
		.afi_addr                    (s0_afi_afi_addr),                    //              afi.afi_addr
		.afi_ba                      (s0_afi_afi_ba),                      //                 .afi_ba
		.afi_ras_n                   (s0_afi_afi_ras_n),                   //                 .afi_ras_n
		.afi_we_n                    (s0_afi_afi_we_n),                    //                 .afi_we_n
		.afi_cas_n                   (s0_afi_afi_cas_n),                   //                 .afi_cas_n
		.afi_odt                     (s0_afi_afi_odt),                     //                 .afi_odt
		.afi_cke                     (s0_afi_afi_cke),                     //                 .afi_cke
		.afi_cs_n                    (s0_afi_afi_cs_n),                    //                 .afi_cs_n
		.afi_dqs_burst               (s0_afi_afi_dqs_burst),               //                 .afi_dqs_burst
		.afi_wdata_valid             (s0_afi_afi_wdata_valid),             //                 .afi_wdata_valid
		.afi_wdata                   (s0_afi_afi_wdata),                   //                 .afi_wdata
		.afi_dm                      (s0_afi_afi_dm),                      //                 .afi_dm
		.afi_rdata                   (m0_seq_mux_afi_rdata),               //                 .afi_rdata
		.afi_rdata_en                (s0_afi_afi_rdata_en),                //                 .afi_rdata_en
		.afi_rdata_en_full           (s0_afi_afi_rdata_en_full),           //                 .afi_rdata_en_full
		.afi_rdata_valid             (m0_seq_mux_afi_rdata_valid),         //                 .afi_rdata_valid
		.phy_write_fr_cycle_shifts   ()                                    //      (terminated)
	);

	ddr2_v12_1_c0 c0 (
		.afi_reset_n         (afi_reset_n),                                         //    afi_reset.reset_n
		.afi_clk             (afi_clk),                                             //      afi_clk.clk
		.afi_half_clk        (afi_half_clk),                                        // afi_half_clk.clk
		.local_init_done     (local_init_done),                                     //       status.local_init_done
		.local_cal_success   (local_cal_success),                                   //             .local_cal_success
		.local_cal_fail      (local_cal_fail),                                      //             .local_cal_fail
		.csr_write_req       (c0_csr_translator_avalon_anti_slave_0_write),         //          csr.write
		.csr_read_req        (c0_csr_translator_avalon_anti_slave_0_read),          //             .read
		.csr_waitrequest     (c0_csr_translator_avalon_anti_slave_0_waitrequest),   //             .waitrequest
		.csr_addr            (c0_csr_translator_avalon_anti_slave_0_address),       //             .address
		.csr_be              (c0_csr_translator_avalon_anti_slave_0_byteenable),    //             .byteenable
		.csr_wdata           (c0_csr_translator_avalon_anti_slave_0_writedata),     //             .writedata
		.csr_rdata           (c0_csr_translator_avalon_anti_slave_0_readdata),      //             .readdata
		.csr_rdata_valid     (c0_csr_translator_avalon_anti_slave_0_readdatavalid), //             .readdatavalid
		.afi_addr            (c0_afi_afi_addr),                                     //          afi.afi_addr
		.afi_ba              (c0_afi_afi_ba),                                       //             .afi_ba
		.afi_ras_n           (c0_afi_afi_ras_n),                                    //             .afi_ras_n
		.afi_we_n            (c0_afi_afi_we_n),                                     //             .afi_we_n
		.afi_cas_n           (c0_afi_afi_cas_n),                                    //             .afi_cas_n
		.afi_odt             (c0_afi_afi_odt),                                      //             .afi_odt
		.afi_cke             (c0_afi_afi_cke),                                      //             .afi_cke
		.afi_cs_n            (c0_afi_afi_cs_n),                                     //             .afi_cs_n
		.afi_dqs_burst       (c0_afi_afi_dqs_burst),                                //             .afi_dqs_burst
		.afi_wdata_valid     (c0_afi_afi_wdata_valid),                              //             .afi_wdata_valid
		.afi_wdata           (c0_afi_afi_wdata),                                    //             .afi_wdata
		.afi_dm              (c0_afi_afi_dm),                                       //             .afi_dm
		.afi_rdata           (m0_afi_afi_rdata),                                    //             .afi_rdata
		.afi_mem_clk_disable (c0_afi_afi_mem_clk_disable),                          //             .afi_mem_clk_disable
		.afi_init_req        (c0_afi_afi_init_req),                                 //             .afi_init_req
		.afi_cal_req         (c0_afi_afi_cal_req),                                  //             .afi_cal_req
		.afi_rdata_en        (c0_afi_afi_rdata_en),                                 //             .afi_rdata_en
		.afi_rdata_en_full   (c0_afi_afi_rdata_en_full),                            //             .afi_rdata_en_full
		.afi_rdata_valid     (m0_afi_afi_rdata_valid),                              //             .afi_rdata_valid
		.afi_cal_success     (m0_afi_afi_cal_success),                              //             .afi_cal_success
		.afi_cal_fail        (m0_afi_afi_cal_fail),                                 //             .afi_cal_fail
		.afi_wlat            (m0_afi_afi_wlat),                                     //             .afi_wlat
		.afi_rlat            (m0_afi_afi_rlat),                                     //             .afi_rlat
		.avl_ready           (avl_ready),                                           //          avl.waitrequest_n
		.avl_burstbegin      (avl_burstbegin),                                      //             .beginbursttransfer
		.avl_addr            (avl_addr),                                            //             .address
		.avl_rdata_valid     (avl_rdata_valid),                                     //             .readdatavalid
		.avl_rdata           (avl_rdata),                                           //             .readdata
		.avl_wdata           (avl_wdata),                                           //             .writedata
		.avl_be              (avl_be),                                              //             .byteenable
		.avl_read_req        (avl_read_req),                                        //             .read
		.avl_write_req       (avl_write_req),                                       //             .write
		.avl_size            (avl_size)                                             //             .burstcount
	);

	altera_mem_if_oct_stratixiv #(
		.OCT_TERM_CONTROL_WIDTH (14)
	) oct0 (
		.oct_rdn                    (oct_rdn),                                     //         oct.rdn
		.oct_rup                    (oct_rup),                                     //            .rup
		.seriesterminationcontrol   (oct0_oct_sharing_seriesterminationcontrol),   // oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol (oct0_oct_sharing_parallelterminationcontrol)  //            .parallelterminationcontrol
	);

	altera_mem_if_dll_stratixiv #(
		.DLL_DELAY_CTRL_WIDTH       (6),
		.DLL_OFFSET_CTRL_WIDTH      (6),
		.DELAY_BUFFER_MODE          ("HIGH"),
		.DELAY_CHAIN_LENGTH         (8),
		.DLL_INPUT_FREQUENCY_PS_STR ("2500 ps")
	) dll0 (
		.clk            (p0_dll_clk_clk),                 //         clk.clk
		.dll_pll_locked (p0_dll_sharing_dll_pll_locked),  // dll_sharing.dll_pll_locked
		.dll_delayctrl  (dll0_dll_sharing_dll_delayctrl)  //            .dll_delayctrl
	);

	altera_mem_if_simple_avalon_mm_bridge #(
		.DATA_WIDTH                (32),
		.SLAVE_DATA_WIDTH          (32),
		.MASTER_DATA_WIDTH         (32),
		.SYMBOL_WIDTH              (8),
		.ADDRESS_WIDTH             (16),
		.MASTER_ADDRESS_WIDTH      (10),
		.SLAVE_ADDRESS_WIDTH       (10),
		.BURSTCOUNT_WIDTH          (3),
		.WORKAROUND_HARD_PHY_ISSUE (0)
	) csr_bridge (
		.clk                   (afi_clk),                         //   clk.clk
		.reset_n               (~rst_controller_reset_out_reset), // reset.reset_n
		.s0_address            (csr_addr),                        //    s0.address
		.s0_read               (csr_read_req),                    //      .read
		.s0_readdata           (csr_rdata),                       //      .readdata
		.s0_write              (csr_write_req),                   //      .write
		.s0_writedata          (csr_wdata),                       //      .writedata
		.s0_waitrequest        (csr_waitrequest),                 //      .waitrequest
		.s0_byteenable         (csr_be),                          //      .byteenable
		.s0_readdatavalid      (csr_rdata_valid),                 //      .readdatavalid
		.m0_address            (csr_bridge_m0_address),           //    m0.address
		.m0_read               (csr_bridge_m0_read),              //      .read
		.m0_readdata           (csr_bridge_m0_readdata),          //      .readdata
		.m0_write              (csr_bridge_m0_write),             //      .write
		.m0_writedata          (csr_bridge_m0_writedata),         //      .writedata
		.m0_waitrequest        (csr_bridge_m0_waitrequest),       //      .waitrequest
		.m0_byteenable         (csr_bridge_m0_byteenable),        //      .byteenable
		.m0_readdatavalid      (csr_bridge_m0_readdatavalid),     //      .readdatavalid
		.s0_waitrequest_n      (),                                // (terminated)
		.s0_beginbursttransfer (1'b0),                            // (terminated)
		.s0_burstcount         (3'b000),                          // (terminated)
		.m0_beginbursttransfer (),                                // (terminated)
		.m0_burstcount         ()                                 // (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) csr_bridge_m0_translator (
		.clk                   (afi_clk),                                                          //                       clk.clk
		.reset                 (rst_controller_reset_out_reset),                                   //                     reset.reset
		.uav_address           (csr_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount        (csr_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read              (csr_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write             (csr_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest       (csr_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid     (csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable        (csr_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata          (csr_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata         (csr_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock              (csr_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess       (csr_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address            (csr_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest        (csr_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_byteenable         (csr_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read               (csr_bridge_m0_read),                                               //                          .read
		.av_readdata           (csr_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid      (csr_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write              (csr_bridge_m0_write),                                              //                          .write
		.av_writedata          (csr_bridge_m0_writedata),                                          //                          .writedata
		.av_burstcount         (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer (1'b0),                                                             //               (terminated)
		.av_begintransfer      (1'b0),                                                             //               (terminated)
		.av_chipselect         (1'b0),                                                             //               (terminated)
		.av_lock               (1'b0),                                                             //               (terminated)
		.av_debugaccess        (1'b0),                                                             //               (terminated)
		.uav_clken             (),                                                                 //               (terminated)
		.av_clken              (1'b1)                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) p0_csr_translator (
		.clk                   (afi_clk),                                                           //                      clk.clk
		.reset                 (~afi_reset_n),                                                      //                    reset.reset
		.uav_address           (p0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount        (p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read              (p0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write             (p0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest       (p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid     (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable        (p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata          (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata         (p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock              (p0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess       (p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address            (p0_csr_translator_avalon_anti_slave_0_address),                     //      avalon_anti_slave_0.address
		.av_write              (p0_csr_translator_avalon_anti_slave_0_write),                       //                         .write
		.av_read               (p0_csr_translator_avalon_anti_slave_0_read),                        //                         .read
		.av_readdata           (p0_csr_translator_avalon_anti_slave_0_readdata),                    //                         .readdata
		.av_writedata          (p0_csr_translator_avalon_anti_slave_0_writedata),                   //                         .writedata
		.av_byteenable         (p0_csr_translator_avalon_anti_slave_0_byteenable),                  //                         .byteenable
		.av_readdatavalid      (p0_csr_translator_avalon_anti_slave_0_readdatavalid),               //                         .readdatavalid
		.av_waitrequest        (p0_csr_translator_avalon_anti_slave_0_waitrequest),                 //                         .waitrequest
		.av_begintransfer      (),                                                                  //              (terminated)
		.av_beginbursttransfer (),                                                                  //              (terminated)
		.av_burstcount         (),                                                                  //              (terminated)
		.av_writebyteenable    (),                                                                  //              (terminated)
		.av_lock               (),                                                                  //              (terminated)
		.av_chipselect         (),                                                                  //              (terminated)
		.av_clken              (),                                                                  //              (terminated)
		.uav_clken             (1'b0),                                                              //              (terminated)
		.av_debugaccess        (),                                                                  //              (terminated)
		.av_outputenable       ()                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) c0_csr_translator (
		.clk                   (afi_clk),                                                           //                      clk.clk
		.reset                 (~afi_reset_n),                                                      //                    reset.reset
		.uav_address           (c0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount        (c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read              (c0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write             (c0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest       (c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid     (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable        (c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata          (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata         (c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock              (c0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess       (c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address            (c0_csr_translator_avalon_anti_slave_0_address),                     //      avalon_anti_slave_0.address
		.av_write              (c0_csr_translator_avalon_anti_slave_0_write),                       //                         .write
		.av_read               (c0_csr_translator_avalon_anti_slave_0_read),                        //                         .read
		.av_readdata           (c0_csr_translator_avalon_anti_slave_0_readdata),                    //                         .readdata
		.av_writedata          (c0_csr_translator_avalon_anti_slave_0_writedata),                   //                         .writedata
		.av_byteenable         (c0_csr_translator_avalon_anti_slave_0_byteenable),                  //                         .byteenable
		.av_readdatavalid      (c0_csr_translator_avalon_anti_slave_0_readdatavalid),               //                         .readdatavalid
		.av_waitrequest        (c0_csr_translator_avalon_anti_slave_0_waitrequest),                 //                         .waitrequest
		.av_begintransfer      (),                                                                  //              (terminated)
		.av_beginbursttransfer (),                                                                  //              (terminated)
		.av_burstcount         (),                                                                  //              (terminated)
		.av_writebyteenable    (),                                                                  //              (terminated)
		.av_lock               (),                                                                  //              (terminated)
		.av_chipselect         (),                                                                  //              (terminated)
		.av_clken              (),                                                                  //              (terminated)
		.uav_clken             (1'b0),                                                              //              (terminated)
		.av_debugaccess        (),                                                                  //              (terminated)
		.av_outputenable       ()                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_TRANS_LOCK            (58),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (76),
		.PKT_THREAD_ID_H           (77),
		.PKT_THREAD_ID_L           (77),
		.PKT_CACHE_H               (84),
		.PKT_CACHE_L               (81),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (4'b0000)
	) csr_bridge_m0_translator_avalon_universal_master_0_agent (
		.clk              (afi_clk),                                                                   //       clk.clk
		.reset            (rst_controller_reset_out_reset),                                            // clk_reset.reset
		.av_address       (csr_bridge_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write         (csr_bridge_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read          (csr_bridge_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata     (csr_bridge_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata      (csr_bridge_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest   (csr_bridge_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid (csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable    (csr_bridge_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount    (csr_bridge_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess   (csr_bridge_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock          (csr_bridge_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data          (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket   (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid         (limiter_rsp_src_valid),                                                     //        rp.valid
		.rp_data          (limiter_rsp_src_data),                                                      //          .data
		.rp_channel       (limiter_rsp_src_channel),                                                   //          .channel
		.rp_startofpacket (limiter_rsp_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket   (limiter_rsp_src_endofpacket),                                               //          .endofpacket
		.rp_ready         (limiter_rsp_src_ready)                                                      //          .ready
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_TRANS_LOCK            (58),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1)
	) p0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (afi_clk),                                                                     //             clk.clk
		.reset                   (~afi_reset_n),                                                                //       clk_reset.reset
		.m0_address              (p0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (p0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (p0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (p0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (p0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (crosser_out_ready),                                                           //              cp.ready
		.cp_valid                (crosser_out_valid),                                                           //                .valid
		.cp_data                 (crosser_out_data),                                                            //                .data
		.cp_startofpacket        (crosser_out_startofpacket),                                                   //                .startofpacket
		.cp_endofpacket          (crosser_out_endofpacket),                                                     //                .endofpacket
		.cp_channel              (crosser_out_channel),                                                         //                .channel
		.rf_sink_ready           (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data)         //                .data
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (afi_clk),                                                                     //       clk.clk
		.reset             (~afi_reset_n),                                                                // clk_reset.reset
		.in_data           (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (32),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (afi_clk),                                                               //       clk.clk
		.reset             (~afi_reset_n),                                                          // clk_reset.reset
		.in_data           (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                  // (terminated)
		.out_startofpacket (),                                                                      // (terminated)
		.out_endofpacket   (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_TRANS_LOCK            (58),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (76),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1)
	) c0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (afi_clk),                                                                     //             clk.clk
		.reset                   (~afi_reset_n),                                                                //       clk_reset.reset
		.m0_address              (c0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (c0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (c0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (c0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (c0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (crosser_001_out_ready),                                                       //              cp.ready
		.cp_valid                (crosser_001_out_valid),                                                       //                .valid
		.cp_data                 (crosser_001_out_data),                                                        //                .data
		.cp_startofpacket        (crosser_001_out_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (crosser_001_out_endofpacket),                                                 //                .endofpacket
		.cp_channel              (crosser_001_out_channel),                                                     //                .channel
		.rf_sink_ready           (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data)         //                .data
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (afi_clk),                                                                     //       clk.clk
		.reset             (~afi_reset_n),                                                                // clk_reset.reset
		.in_data           (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (32),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (afi_clk),                                                               //       clk.clk
		.reset             (~afi_reset_n),                                                          // clk_reset.reset
		.in_data           (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                  // (terminated)
		.out_startofpacket (),                                                                      // (terminated)
		.out_endofpacket   (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	ddr2_v12_1_addr_router addr_router (
		.sink_ready         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (afi_clk),                                                                   //       clk.clk
		.reset              (rst_controller_reset_out_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                     //       src.ready
		.src_valid          (addr_router_src_valid),                                                     //          .valid
		.src_data           (addr_router_src_data),                                                      //          .data
		.src_channel        (addr_router_src_channel),                                                   //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                //          .endofpacket
	);

	ddr2_v12_1_id_router id_router (
		.sink_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (p0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (afi_clk),                                                           //       clk.clk
		.reset              (~afi_reset_n),                                                      // clk_reset.reset
		.src_ready          (id_router_src_ready),                                               //       src.ready
		.src_valid          (id_router_src_valid),                                               //          .valid
		.src_data           (id_router_src_data),                                                //          .data
		.src_channel        (id_router_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                          //          .endofpacket
	);

	ddr2_v12_1_id_router id_router_001 (
		.sink_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (c0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (afi_clk),                                                           //       clk.clk
		.reset              (~afi_reset_n),                                                      // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                           //       src.ready
		.src_valid          (id_router_001_src_valid),                                           //          .valid
		.src_data           (id_router_001_src_data),                                            //          .data
		.src_channel        (id_router_001_src_channel),                                         //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (76),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32)
	) limiter (
		.clk                    (afi_clk),                        //       clk.clk
		.reset                  (rst_controller_reset_out_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),          //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),          //          .valid
		.cmd_sink_data          (addr_router_src_data),           //          .data
		.cmd_sink_channel       (addr_router_src_channel),        //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),  //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),    //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),         //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),       //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),          //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket), //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),   //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS        (1),
		.OUTPUT_RESET_SYNC_EDGES ("deassert"),
		.SYNC_DEPTH              (2)
	) rst_controller (
		.reset_in0  (~afi_reset_n),                   // reset_in0.reset
		.clk        (afi_clk),                        //       clk.clk
		.reset_out  (rst_controller_reset_out_reset), // reset_out.reset
		.reset_in1  (1'b0),                           // (terminated)
		.reset_in2  (1'b0),                           // (terminated)
		.reset_in3  (1'b0),                           // (terminated)
		.reset_in4  (1'b0),                           // (terminated)
		.reset_in5  (1'b0),                           // (terminated)
		.reset_in6  (1'b0),                           // (terminated)
		.reset_in7  (1'b0),                           // (terminated)
		.reset_in8  (1'b0),                           // (terminated)
		.reset_in9  (1'b0),                           // (terminated)
		.reset_in10 (1'b0),                           // (terminated)
		.reset_in11 (1'b0),                           // (terminated)
		.reset_in12 (1'b0),                           // (terminated)
		.reset_in13 (1'b0),                           // (terminated)
		.reset_in14 (1'b0),                           // (terminated)
		.reset_in15 (1'b0)                            // (terminated)
	);

	ddr2_v12_1_cmd_xbar_demux cmd_xbar_demux (
		.clk                (afi_clk),                           //        clk.clk
		.reset              (rst_controller_reset_out_reset),    //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),           //           .channel
		.sink_data          (limiter_cmd_src_data),              //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),         //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),         //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),          //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),       //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket), //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),   //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),         //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),         //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),          //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),       //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket), //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket)    //           .endofpacket
	);

	ddr2_v12_1_rsp_xbar_demux rsp_xbar_demux (
		.clk                (afi_clk),                           //       clk.clk
		.reset              (~afi_reset_n),                      // clk_reset.reset
		.sink_ready         (id_router_src_ready),               //      sink.ready
		.sink_channel       (id_router_src_channel),             //          .channel
		.sink_data          (id_router_src_data),                //          .data
		.sink_startofpacket (id_router_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),         //          .endofpacket
		.sink_valid         (id_router_src_valid),               //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),         //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),         //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),          //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),       //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket), //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket)    //          .endofpacket
	);

	ddr2_v12_1_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (afi_clk),                               //       clk.clk
		.reset              (~afi_reset_n),                          // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),               //      sink.ready
		.sink_channel       (id_router_001_src_channel),             //          .channel
		.sink_data          (id_router_001_src_data),                //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),       //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),         //          .endofpacket
		.sink_valid         (id_router_001_src_valid),               //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),         //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),         //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),          //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),       //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket), //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)    //          .endofpacket
	);

	ddr2_v12_1_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (afi_clk),                        //       clk.clk
		.reset               (rst_controller_reset_out_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),         //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),         //          .valid
		.src_data            (rsp_xbar_mux_src_data),          //          .data
		.src_channel         (rsp_xbar_mux_src_channel),       //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket), //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),   //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),          //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),          //          .valid
		.sink0_channel       (crosser_002_out_channel),        //          .channel
		.sink0_data          (crosser_002_out_data),           //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),    //          .endofpacket
		.sink1_ready         (crosser_003_out_ready),          //     sink1.ready
		.sink1_valid         (crosser_003_out_valid),          //          .valid
		.sink1_channel       (crosser_003_out_channel),        //          .channel
		.sink1_data          (crosser_003_out_data),           //          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket)     //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (afi_clk),                           //        in_clk.clk
		.in_reset          (rst_controller_reset_out_reset),    //  in_clk_reset.reset
		.out_clk           (afi_clk),                           //       out_clk.clk
		.out_reset         (~afi_reset_n),                      // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_src0_ready),         //            in.ready
		.in_valid          (cmd_xbar_demux_src0_valid),         //              .valid
		.in_startofpacket  (cmd_xbar_demux_src0_startofpacket), //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_src0_endofpacket),   //              .endofpacket
		.in_channel        (cmd_xbar_demux_src0_channel),       //              .channel
		.in_data           (cmd_xbar_demux_src0_data),          //              .data
		.out_ready         (crosser_out_ready),                 //           out.ready
		.out_valid         (crosser_out_valid),                 //              .valid
		.out_startofpacket (crosser_out_startofpacket),         //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),           //              .endofpacket
		.out_channel       (crosser_out_channel),               //              .channel
		.out_data          (crosser_out_data),                  //              .data
		.in_empty          (1'b0),                              //   (terminated)
		.in_error          (1'b0),                              //   (terminated)
		.out_empty         (),                                  //   (terminated)
		.out_error         ()                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (afi_clk),                           //        in_clk.clk
		.in_reset          (rst_controller_reset_out_reset),    //  in_clk_reset.reset
		.out_clk           (afi_clk),                           //       out_clk.clk
		.out_reset         (~afi_reset_n),                      // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_src1_ready),         //            in.ready
		.in_valid          (cmd_xbar_demux_src1_valid),         //              .valid
		.in_startofpacket  (cmd_xbar_demux_src1_startofpacket), //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_src1_endofpacket),   //              .endofpacket
		.in_channel        (cmd_xbar_demux_src1_channel),       //              .channel
		.in_data           (cmd_xbar_demux_src1_data),          //              .data
		.out_ready         (crosser_001_out_ready),             //           out.ready
		.out_valid         (crosser_001_out_valid),             //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),     //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),       //              .endofpacket
		.out_channel       (crosser_001_out_channel),           //              .channel
		.out_data          (crosser_001_out_data),              //              .data
		.in_empty          (1'b0),                              //   (terminated)
		.in_error          (1'b0),                              //   (terminated)
		.out_empty         (),                                  //   (terminated)
		.out_error         ()                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (afi_clk),                           //        in_clk.clk
		.in_reset          (~afi_reset_n),                      //  in_clk_reset.reset
		.out_clk           (afi_clk),                           //       out_clk.clk
		.out_reset         (rst_controller_reset_out_reset),    // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_src0_ready),         //            in.ready
		.in_valid          (rsp_xbar_demux_src0_valid),         //              .valid
		.in_startofpacket  (rsp_xbar_demux_src0_startofpacket), //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_src0_endofpacket),   //              .endofpacket
		.in_channel        (rsp_xbar_demux_src0_channel),       //              .channel
		.in_data           (rsp_xbar_demux_src0_data),          //              .data
		.out_ready         (crosser_002_out_ready),             //           out.ready
		.out_valid         (crosser_002_out_valid),             //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),     //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),       //              .endofpacket
		.out_channel       (crosser_002_out_channel),           //              .channel
		.out_data          (crosser_002_out_data),              //              .data
		.in_empty          (1'b0),                              //   (terminated)
		.in_error          (1'b0),                              //   (terminated)
		.out_empty         (),                                  //   (terminated)
		.out_error         ()                                   //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (87),
		.BITS_PER_SYMBOL     (87),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (2),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (afi_clk),                               //        in_clk.clk
		.in_reset          (~afi_reset_n),                          //  in_clk_reset.reset
		.out_clk           (afi_clk),                               //       out_clk.clk
		.out_reset         (rst_controller_reset_out_reset),        // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_001_src0_ready),         //            in.ready
		.in_valid          (rsp_xbar_demux_001_src0_valid),         //              .valid
		.in_startofpacket  (rsp_xbar_demux_001_src0_startofpacket), //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_001_src0_endofpacket),   //              .endofpacket
		.in_channel        (rsp_xbar_demux_001_src0_channel),       //              .channel
		.in_data           (rsp_xbar_demux_001_src0_data),          //              .data
		.out_ready         (crosser_003_out_ready),                 //           out.ready
		.out_valid         (crosser_003_out_valid),                 //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),         //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),           //              .endofpacket
		.out_channel       (crosser_003_out_channel),               //              .channel
		.out_data          (crosser_003_out_data),                  //              .data
		.in_empty          (1'b0),                                  //   (terminated)
		.in_error          (1'b0),                                  //   (terminated)
		.out_empty         (),                                      //   (terminated)
		.out_error         ()                                       //   (terminated)
	);

endmodule
